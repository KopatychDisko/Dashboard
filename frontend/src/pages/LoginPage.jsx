import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth.jsx'
import LoadingSpinner from '../components/LoadingSpinner'

const TELEGRAM_SCRIPT_ID = 'telegram-login-script'

const LoginPage = () => {
  const navigate = useNavigate()
  const { login } = useAuth()
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    let isComponentMounted = true
    let checkWidgetInterval = null
    let initTimeout = null

    const initTelegramWidget = () => {
      if (typeof window === 'undefined') return

      const container = document.getElementById('telegram-login-container')
      if (!container) {
        console.warn('Telegram container not found: #telegram-login-container')
        return
      }

      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–π —Å–∫—Ä–∏–ø—Ç, –Ω–æ –Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const prevScript = document.getElementById(TELEGRAM_SCRIPT_ID)
      if (prevScript) prevScript.remove()

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
      const script = document.createElement('script')
      script.id = TELEGRAM_SCRIPT_ID
      script.src = `https://telegram.org/js/telegram-widget.js?22&ts=${Date.now()}`
      script.async = true
      console.log('Creating new Telegram widget')
      
      script.setAttribute(
        'data-telegram-login',
        import.meta.env.VITE_TELEGRAM_BOT_USERNAME || 'DashBoardMetricksBot'
      )
      script.setAttribute('data-size', 'medium')
      script.setAttribute('data-radius', '12')
      script.setAttribute('data-request-access', 'write')
      script.setAttribute('data-userpic', 'false')
      script.setAttribute('data-onauth', 'onTelegramAuth(user)')

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      window.onTelegramAuth = async (telegramUser) => {
        console.log('Telegram auth triggered:', telegramUser)
        if (!isComponentMounted) return

        try {
          const result = await login({
            telegram_id: telegramUser.id,
            first_name: telegramUser.first_name,
            last_name: telegramUser.last_name || null,
            username: telegramUser.username || null,
            photo_url: telegramUser.photo_url || null,
            auth_date: telegramUser.auth_date,
            hash: telegramUser.hash
          })

          if (result?.success) {
            navigate('/bots')
          } else {
            setError(result?.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
          }
        } catch (err) {
          console.error('Auth error:', err)
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        }
      }
      
      script.onerror = (e) => {
        console.error('Telegram widget load error:', e)
        if (isComponentMounted) {
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Telegram –≤–∏–¥–∂–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ CSP.')
          setLoading(false)
        }
      }

      script.onload = () => {
        console.log('Telegram widget script loaded')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ iframe
        checkWidgetInterval = setInterval(() => {
          const container = document.getElementById('telegram-login-container')
          const iframe = container?.querySelector('iframe')
          const isWidgetReady = window.Telegram && window.Telegram.Login && window.Telegram.Login.auth
          
          console.log('Checking widget:', { 
            hasIframe: !!iframe, 
            isWidgetReady,
            containerContent: container?.innerHTML 
          })
          
          if (iframe && isWidgetReady) {
            console.log('Telegram widget fully initialized with iframe')
            if (isComponentMounted) {
              clearInterval(checkWidgetInterval)
              setLoading(false)
              
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞
              if (typeof window.onTelegramAuth !== 'function') {
                console.warn('Reinitializing onTelegramAuth handler')
                window.onTelegramAuth = async (telegramUser) => {
                  console.log('Telegram auth triggered:', telegramUser)
                  if (!isComponentMounted) return
                  
                  try {
                    const result = await login({
                      telegram_id: telegramUser.id,
                      first_name: telegramUser.first_name,
                      last_name: telegramUser.last_name || null,
                      username: telegramUser.username || null,
                      photo_url: telegramUser.photo_url || null,
                      auth_date: telegramUser.auth_date,
                      hash: telegramUser.hash
                    })

                    if (result?.success) {
                      navigate('/bots')
                    } else {
                      setError(result?.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
                    }
                  } catch (err) {
                    console.error('Auth error:', err)
                    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                  }
                }
              }
            }
          }
        }, 100)

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
        initTimeout = setTimeout(() => {
          if (checkWidgetInterval) clearInterval(checkWidgetInterval)
          if (isComponentMounted && loading) {
            const container = document.getElementById('telegram-login-container')
            const iframe = container?.querySelector('iframe')
            const isWidgetReady = window.Telegram && window.Telegram.Login && window.Telegram.Login.auth
            
            console.error('Widget initialization timeout:', {
              hasIframe: !!iframe,
              isWidgetReady,
              containerContent: container?.innerHTML
            })
            
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –≤–∏–¥–∂–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.')
            setLoading(false)
          }
        }, 10000)
      }

      container.appendChild(script)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∂–µ—Ç
    initTelegramWidget()

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      isComponentMounted = false
      if (checkWidgetInterval) clearInterval(checkWidgetInterval)
      if (initTimeout) clearTimeout(initTimeout)
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–ø—Ç, –Ω–æ –Ω–µ —á–∏—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const script = document.getElementById(TELEGRAM_SCRIPT_ID)
      if (script) script.remove()
    }
  }, [loading, login, navigate])

  return (
    <div className="min-h-screen flex items-center justify-center p-6">
      <div className="max-w-md w-full">
        <div className="glass-card relative p-10">
          <div className="text-center mb-8">
            <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-r from-emerald-400 to-blue-400 flex items-center justify-center text-4xl">
              üìä
            </div>

            <h1 className="text-3xl font-bold mb-3 gradient-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>

            <p className="text-white/70 text-lg">–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É</p>
          </div>

          {error && (
            <div className="bg-red-500/10 border border-red-500/30 rounded-xl p-4 mb-6 text-red-400 text-center">
              {error}
            </div>
          )}

          <div className="bg-gradient-to-r from-emerald-400/10 to-blue-400/10 rounded-xl p-8 mb-6">
            <div id="telegram-login-container" className="flex justify-center min-h-[46px] items-center">
              {loading && <LoadingSpinner text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è..." />}
            </div>
          </div>

          <div className="flex justify-center">
            <button
              onClick={() => navigate('/account-switch')}
              className="px-4 py-2 bg-white/10 hover:bg-white/20 rounded-xl transition-colors text-sm"
            >
              –•–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç ‚Äî –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?
            </button>
          </div>

          <div className="mt-8">
            <div className="space-y-3">
              <div className="flex items-start gap-3">
                <span className="text-emerald-400 text-lg">‚úì</span>
                <div>
                  <p className="text-white font-semibold mb-1">–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥</p>
                  <p className="text-white/60 text-sm">–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram Widget</p>
                </div>
              </div>

              <div className="flex items-start gap-3">
                <span className="text-emerald-400 text-lg">‚úì</span>
                <div>
                  <p className="text-white font-semibold mb-1">–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>
                  <p className="text-white/60 text-sm">–í—Ö–æ–¥ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ —á–µ—Ä–µ–∑ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç</p>
                </div>
              </div>

              <div className="flex items-start gap-3">
                <span className="text-emerald-400 text-lg">‚úì</span>
                <div>
                  <p className="text-white font-semibold mb-1">–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø</p>
                  <p className="text-white/60 text-sm">–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –¥–∞—à–±–æ—Ä–¥</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default LoginPage