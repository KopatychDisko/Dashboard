import React, { useState, useEffect, useRef } from 'react'
import { useAuth } from '../hooks/useAuth.jsx'
import LoadingSpinner from '../components/LoadingSpinner'
import { useNavigate } from 'react-router-dom'

const TELEGRAM_SCRIPT_ID = 'telegram-login-script'

const LoginPage = () => {
  const { login } = useAuth()
  const navigate = useNavigate()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)
  const handlerRef = useRef(null)

  useEffect(() => {
    if (typeof window === 'undefined') return

    const container = document.getElementById('telegram-login-container')
    if (!container) {
      console.warn('Telegram container not found: #telegram-login-container')
      return
    }

    // Cleanup —Å—Ç–∞—Ä–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const prevScript = document.getElementById(TELEGRAM_SCRIPT_ID)
    if (prevScript) prevScript.remove()
    container.innerHTML = ''

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å anti-cache –∏ force_auth
    const script = document.createElement('script')
    script.id = TELEGRAM_SCRIPT_ID
    script.src = `https://telegram.org/js/telegram-widget.js?22&ts=${Date.now()}&force_auth=true`
    script.async = true
    script.setAttribute(
      'data-telegram-login',
      import.meta.env.VITE_TELEGRAM_BOT_USERNAME || 'DashBoardMetricksBot'
    )
    script.setAttribute('data-size', 'large')
    script.setAttribute('data-radius', '12')
    script.setAttribute('data-request-access', 'write')
    script.setAttribute('data-userpic', 'false')
    script.setAttribute('data-onauth', 'onTelegramAuth(user)')

    script.onerror = (e) => {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Telegram –≤–∏–¥–∂–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ CSP.')
      console.error('Telegram widget load error:', e)
    }

    container.appendChild(script)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const onTelegramAuth = async (telegramUser) => {
      setLoading(true)
      setError('')

      try {
        const result = await login({
          telegram_id: telegramUser.id,
          first_name: telegramUser.first_name,
          last_name: telegramUser.last_name || null,
          username: telegramUser.username || null,
          photo_url: telegramUser.photo_url || null,
          auth_date: telegramUser.auth_date,
          hash: telegramUser.hash
        })

        if (result?.success) setSuccess(true)
        else setError(result?.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        console.error('Auth error:', err)
      } finally {
        setLoading(false)
      }
    }

    handlerRef.current = onTelegramAuth
    window.onTelegramAuth = handlerRef.current

    return () => {
      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      if (window.onTelegramAuth === handlerRef.current) {
        delete window.onTelegramAuth
      }

      // –ß–∏—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      container.innerHTML = ''

      // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
      const s = document.getElementById(TELEGRAM_SCRIPT_ID)
      if (s) s.remove()
    }
  }, [login])

  if (success) {
    return (
      <div className="min-h-screen flex items-center justify-center p-6">
        <div className="max-w-md w-full">
          <div className="glass-card relative p-10 text-center">
            <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-r from-emerald-400 to-blue-400 flex items-center justify-center text-4xl">
              ‚úì
            </div>

            <h2 className="text-2xl font-bold mb-3 gradient-text">–£—Å–ø–µ—à–Ω–æ!</h2>

            <p className="text-white/70 mb-6">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –±–æ—Ç–æ–≤...</p>

            <LoadingSpinner size="sm" />
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-6">
      <div className="max-w-md w-full">
        <div className="glass-card relative p-10">
          <div className="text-center mb-8">
            <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-r from-emerald-400 to-blue-400 flex items-center justify-center text-4xl">
              üìä
            </div>

            <h1 className="text-3xl font-bold mb-3 gradient-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>

            <p className="text-white/70 text-lg">–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É</p>
          </div>

          {error && (
            <div className="bg-red-500/10 border border-red-500/30 rounded-xl p-4 mb-6 text-red-400 text-center">
              {error}
            </div>
          )}

          <div className="bg-gradient-to-r from-emerald-400/10 to-blue-400/10 rounded-xl p-8 mb-6">
            <div id="telegram-login-container" className="flex justify-center min-h-[46px] items-center">
              {loading && <LoadingSpinner text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è..." />}
            </div>
          </div>

          <div className="flex justify-center">
            <button
              onClick={() => navigate('/account-switch')}
              className="px-4 py-2 bg-white/10 hover:bg-white/20 rounded-xl transition-colors text-sm"
            >
              –•–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç ‚Äî –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?
            </button>
          </div>

          <div className="mt-8">
            <div className="space-y-3">
              <div className="flex items-start gap-3">
                <span className="text-emerald-400 text-lg">‚úì</span>
                <div>
                  <p className="text-white font-semibold mb-1">–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥</p>
                  <p className="text-white/60 text-sm">–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram Widget</p>
                </div>
              </div>

              <div className="flex items-start gap-3">
                <span className="text-emerald-400 text-lg">‚úì</span>
                <div>
                  <p className="text-white font-semibold mb-1">–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>
                  <p className="text-white/60 text-sm">–í—Ö–æ–¥ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ —á–µ—Ä–µ–∑ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç</p>
                </div>
              </div>

              <div className="flex items-start gap-3">
                <span className="text-emerald-400 text-lg">‚úì</span>
                <div>
                  <p className="text-white font-semibold mb-1">–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø</p>
                  <p className="text-white/60 text-sm">–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –¥–∞—à–±–æ—Ä–¥</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default LoginPage