import logging
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Optional
from supabase import create_client, Client
from postgrest.exceptions import APIError

from app.core.config import settings

logger = logging.getLogger(__name__)

class SupabaseClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bot_id –¥–ª—è –º—É–ª—å—Ç–∏–±–æ—Ç–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    def __init__(self, bot_id: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase
        
        Args:
            bot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.url = settings.SUPABASE_URL
        self.key = settings.SUPABASE_KEY
        self.bot_id = bot_id
        self.client: Optional[Client] = None
        
        if self.bot_id:
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SupabaseClient –¥–ª—è bot_id: {self.bot_id}")
        else:
            logger.info("SupabaseClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ bot_id - –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –±–æ—Ç–∞–º")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
        try:
            self.client = create_client(self.url, self.key)
            logger.info(f"Supabase client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω{f' –¥–ª—è bot_id: {self.bot_id}' if self.bot_id else ''}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase client: {e}")
            raise
    
    async def get_user_bots(self, telegram_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ bot_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            bots = set()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ sales_users
            users_response = self.client.table('sales_admins').select('bot_id').eq(
                'telegram_id', telegram_id
            ).execute()
            
            if users_response.data:
                for user in users_response.data:
                    if user.get('bot_id'):
                        bots.add(user['bot_id'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ sales_admins
            admins_response = self.client.table('sales_admins').select('bot_id').eq(
                'telegram_id', telegram_id
            ).execute()
            
            if admins_response.data:
                for admin in admins_response.data:
                    if admin.get('bot_id'):
                        bots.add(admin['bot_id'])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(bots)} –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {list(bots)}")
            return list(bots)
            
        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return []
    
    async def get_user_info(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            response = self.client.table('sales_users').select(
                'telegram_id', 'username', 'first_name', 'last_name', 'language_code', 'created_at', 'updated_at', 'is_active'
            ).eq('telegram_id', telegram_id).limit(1).execute()
            
            if response.data:
                return response.data[0]
            return None
            
        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {telegram_id}: {e}")
            return None
    
    async def create_or_update_user(self, user_data: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing = await self.get_user_info(user_data['telegram_id'])
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                self.client.table('sales_users').update({
                    'username': user_data.get('username'),
                    'first_name': user_data.get('first_name'),
                    'last_name': user_data.get('last_name'),
                    'updated_at': datetime.now().isoformat(),
                    'is_active': True
                }).eq('telegram_id', user_data['telegram_id']).execute()
                
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ (–±–µ–∑ bot_id –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
                self.client.table('sales_users').insert({
                    'telegram_id': user_data['telegram_id'],
                    'username': user_data.get('username'),
                    'first_name': user_data.get('first_name'),
                    'last_name': user_data.get('last_name'),
                    'is_active': True,
                    'bot_id': 'system'  # –í—Ä–µ–º–µ–Ω–Ω—ã–π bot_id –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                }).execute()
                
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}")
            
            return True
            
        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def get_dashboard_metrics(self, bot_id: str, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
            users_query = self.client.table('sales_users').select('telegram_id').eq('bot_id', bot_id)
            users_response = users_query.execute()
            total_users = len(users_response.data) if users_response.data else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
            new_users_query = self.client.table('sales_users').select('telegram_id').eq(
                'bot_id', bot_id
            ).gte('created_at', cutoff_date.isoformat())
            new_users_response = new_users_query.execute()
            new_users = len(new_users_response.data) if new_users_response.data else 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            sessions_query = self.client.table('sales_chat_sessions').select(
                'id', 'user_id', 'current_stage', 'created_at'
            ).eq('bot_id', bot_id).gte('created_at', cutoff_date.isoformat())
            sessions_response = sessions_query.execute()
            sessions = sessions_response.data if sessions_response.data else []
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            # –õ–æ–≥–∏–∫–∞: –∏—â–µ–º —Å–µ—Å—Å–∏–∏ –≥–¥–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (role='user') —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now(timezone.utc).date()
            logger.info(f"üîç –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today})")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ session_id –¥–ª—è –±–æ—Ç–∞
            sessions_query = self.client.table('sales_chat_sessions').select('id').eq('bot_id', bot_id)
            sessions_response = sessions_query.execute()
            session_ids = [s['id'] for s in (sessions_response.data or [])]
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(session_ids)} —Å–µ—Å—Å–∏–π –¥–ª—è –±–æ—Ç–∞ {bot_id}")
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (role='user') —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–∏—Ö —Å–µ—Å—Å–∏—è—Ö
            active_today = 0
            if session_ids:
                messages_query = self.client.table('sales_messages').select(
                    'session_id'
                ).in_('session_id', session_ids).eq('role', 'user').gte(
                    'created_at', today.isoformat()
                )
                messages_response = messages_query.execute()
                
                # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ session_id (–æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è)
                unique_sessions = set(msg['session_id'] for msg in (messages_response.data or []))
                active_today = len(unique_sessions)
                
                logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(messages_response.data or [])} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è")
                logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {active_today}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –±–æ—Ç–∞ {bot_id}")
            
            # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            return {
                'total_revenue': 0.0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π
                'new_users': new_users,
                'conversion_rate': 0.0,  # TODO: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é
                'average_check': 0.0,  # TODO: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π
                'ltv': 0.0,  # TODO: LTV –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
                'active_today': active_today,
                'total_users': total_users,
                'total_sessions': len(sessions),
                'period_days': days
            }
            
        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return {
                'total_revenue': 0.0,
                'new_users': 0,
                'conversion_rate': 0.0,
                'average_check': 0.0,
                'ltv': 0.0,
                'active_today': 0,
                'total_users': 0,
                'total_sessions': 0,
                'period_days': days
            }
    
    async def get_funnel_stats(self, bot_id: str, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å —ç—Ç–∞–ø–∞–º–∏
            sessions_query = self.client.table('sales_chat_sessions').select(
                'id', 'user_id', 'current_stage', 'lead_quality_score'
            ).eq('bot_id', bot_id).gte('created_at', cutoff_date.isoformat())
            sessions_response = sessions_query.execute()
            sessions = sessions_response.data if sessions_response.data else []
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —ç—Ç–∞–ø–∞–º
            stages = {}
            for session in sessions:
                stage = session.get('current_stage', 'unknown')
                stages[stage] = stages.get(stage, 0) + 1
            
            total_sessions = len(sessions)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ—Ä–æ–Ω–∫—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
            funnel_steps = []
            stage_order = ['introduction', 'interest', 'consideration', 'intent', 'purchase']
            
            for i, stage in enumerate(stage_order):
                count = stages.get(stage, 0)
                percentage = (count / total_sessions * 100) if total_sessions > 0 else 0
                
                funnel_steps.append({
                    'stage': stage,
                    'users_count': count,
                    'percentage': round(percentage, 1),
                    'revenue': 0.0,  # TODO: –ü–æ—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ —ç—Ç–∞–ø–µ
                    'avg_check': 0.0  # TODO: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –Ω–∞ —ç—Ç–∞–ø–µ
                })
            
            return {
                'steps': funnel_steps,
                'total_users': total_sessions,
                'total_conversion': funnel_steps[-1]['percentage'] if funnel_steps else 0
            }
            
        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return {
                'steps': [],
                'total_users': 0,
                'total_conversion': 0
            }
    
    async def get_revenue_by_days(self, bot_id: str, days: int = 7) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã—Ä—É—á–∫—É –ø–æ –¥–Ω—è–º –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            revenue_data = []
            
            # TODO: –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–ª–∞—Ç–µ–∂–µ–π/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:
            # payments = self.client.table('payments').select('amount, created_at').eq(
            #     'bot_id', bot_id
            # ).gte('created_at', cutoff_date.isoformat()).execute()
            # 
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º –∏ –ø–æ–¥—Å—á–µ—Ç —Å—É–º–º—ã
            
            logger.warning(f"get_revenue_by_days: –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í–µ—Ä–Ω–∏—Ç–µ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.")
            return revenue_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return []

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
def get_supabase_client(bot_id: str = None) -> SupabaseClient:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
    client = SupabaseClient(bot_id)
    return client