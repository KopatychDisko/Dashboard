import hashlib
import hmac
import logging
from urllib.parse import unquote
from typing import Dict, Optional

from app.core.config import settings

logger = logging.getLogger(__name__)

class TelegramAuth:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Widget"""
    
    @staticmethod
    def verify_telegram_auth(auth_data: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Widget
        
        Args:
            auth_data: –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            logger.info("=" * 80)
            logger.info("üîê –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò TELEGRAM –ü–û–î–ü–ò–°–ò")
            logger.info("=" * 80)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            received_hash = auth_data.get('hash', '')
            if not received_hash:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–π hash –æ—Ç Telegram: {received_hash}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ hash
            auth_data_copy = {k: v for k, v in auth_data.items() if k != 'hash'}
            logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ hash): {auth_data_copy}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            data_check_string = '\n'.join([
                f"{k}={v}" for k, v in sorted(auth_data_copy.items())
            ])
            
            logger.info(f"üìù Data check string:\n{data_check_string}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            bot_token = settings.TELEGRAM_BOT_TOKEN
            logger.info(f"ü§ñ BOT_TOKEN –¥–ª–∏–Ω–∞: {len(bot_token)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"ü§ñ BOT_TOKEN –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: {bot_token[:10]}...")
            logger.info(f"ü§ñ BOT_TOKEN –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: ...{bot_token[-5:]}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
            logger.info("üî® –°–æ–∑–¥–∞–µ–º SHA256 —Ö–µ—à –æ—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
            secret_key = hashlib.sha256(bot_token.encode()).digest()
            logger.info(f"üîë Secret key (hex –ø–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç): {secret_key[:20].hex()}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º HMAC
            logger.info("üî® –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256...")
            calculated_hash = hmac.new(
                secret_key,
                data_check_string.encode(),
                hashlib.sha256
            ).hexdigest()
            
            logger.info(f"üî¢ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hash: {calculated_hash}")
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–π hash:  {received_hash}")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
            is_valid = hmac.compare_digest(calculated_hash, received_hash)
            
            if is_valid:
                logger.info("‚úÖ –ü–û–î–ü–ò–°–ò –°–û–í–ü–ê–î–ê–Æ–¢! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            else:
                logger.warning("‚ùå –ü–û–î–ü–ò–°–ò –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
                logger.warning(f"‚ùå –†–∞–∑–Ω–∏—Ü–∞: expected={calculated_hash}, got={received_hash}")
            
            logger.info("=" * 80)
            return is_valid
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    @staticmethod
    def check_auth_date(auth_date: int, max_age_minutes: int = 60) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            auth_date: –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (timestamp)
            max_age_minutes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–∏–Ω—É—Ç–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞
        """
        import time
        
        current_time = int(time.time())
        auth_age_seconds = current_time - auth_date
        max_age_seconds = max_age_minutes * 60
        
        is_valid = auth_age_seconds <= max_age_seconds
        
        if not is_valid:
            logger.warning(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞: {auth_age_seconds}s > {max_age_seconds}s")
        
        return is_valid
    
    @staticmethod
    def extract_user_data(auth_data: Dict) -> Dict:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            auth_data: –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram
            
        Returns:
            Dict: –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        return {
            'telegram_id': int(auth_data.get('id', 0)),
            'first_name': auth_data.get('first_name', ''),
            'last_name': auth_data.get('last_name'),
            'username': auth_data.get('username'),
            'photo_url': auth_data.get('photo_url'),
            'auth_date': int(auth_data.get('auth_date', 0))
        }