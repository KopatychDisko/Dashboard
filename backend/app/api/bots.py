import logging
from fastapi import APIRouter, HTTPException, Query
from typing import List, Dict, Any

from app.database.supabase_client import get_supabase_client

logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/{telegram_id}")
async def get_user_bots(telegram_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        db_client = get_supabase_client()
        await db_client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bots = await db_client.get_user_bots(telegram_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö
        bots_info = []
        for bot_id in user_bots:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
            bot_client = get_supabase_client(bot_id)
            await bot_client.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å first_name = Test)
            users_count = 0
            try:
                logger.info(f"üîç –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è bot_id: {bot_id}")
                users_response = bot_client.client.table('sales_users').select(
                    'telegram_id'
                ).eq('bot_id', bot_id).neq('first_name', 'Test').execute()
                
                logger.info(f"üìä –û—Ç–≤–µ—Ç –æ—Ç –ë–î: data={users_response.data}")
                logger.info(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(users_response.data)}")
                logger.info(f"üìä –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞: {len(users_response.data) if users_response.data else 0}")
                
                users_count = len(users_response.data) if users_response.data else 0
                logger.info(f"‚úÖ –î–ª—è –±–æ—Ç–∞ {bot_id} –Ω–∞–π–¥–µ–Ω–æ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ Test)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            
            bot_info = {
                "bot_id": bot_id,
                "name": bot_id.replace("-", " ").title(),
                "status": "active",
                "total": users_count,
                "created_at": None,
                "description": f"–ë–æ—Ç {bot_id}"
            }
            bots_info.append(bot_info)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(bots_info)} –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        return {
            "success": True,
            "telegram_id": telegram_id,
            "bots": bots_info
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"
        )

@router.get("/{bot_id}/info")
async def get_bot_info(bot_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    """
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ {bot_id}")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
        metrics = await db_client.get_dashboard_metrics(bot_id, days=30)
        
        bot_info = {
            "bot_id": bot_id,
            "name": bot_id.replace("-", " ").title(),
            "status": "active",
            "total_users": metrics.get('total_users', 0),
            "total_sessions": metrics.get('total_sessions', 0),
            "created_at": None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            "description": f"–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç {bot_id}",
            "metrics": metrics
        }
        
        return {
            "success": True,
            "bot": bot_info
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"
        )

@router.get("/{bot_id}/users")
async def get_bot_users(
    bot_id: str,
    limit: int = Query(100, ge=1, le=1000),
    offset: int = Query(0, ge=0)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    """
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ {bot_id}, limit={limit}, offset={offset}")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        users = []
        
        return {
            "success": True,
            "bot_id": bot_id,
            "users": users,
            "total": len(users),
            "limit": limit,
            "offset": offset
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
        )