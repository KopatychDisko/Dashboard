import logging
from fastapi import APIRouter, HTTPException, Query, Path
from typing import Dict, Any, List
from datetime import datetime

from app.database.supabase_client import get_supabase_client

logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/{bot_id}/dashboard", response_model=Dict[str, Any])
async def get_dashboard_analytics(
    bot_id: str = Path(..., description="ID –±–æ—Ç–∞"),
    days: int = Query(7, ge=1, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    
    Returns:
        Dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏, –≤–æ—Ä–æ–Ω–∫–æ–π –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã—Ä—É—á–∫–æ–π –ø–æ –¥–Ω—è–º
    """
    try:
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}, –ø–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
        metrics_data = await db_client.get_dashboard_metrics(bot_id, days)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂...")
        funnel_data = await db_client.get_funnel_stats(bot_id, days)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä—É—á–∫—É –ø–æ –¥–Ω—è–º
        logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º...")
        revenue_data = await db_client.get_revenue_by_days(bot_id, days)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            "bot_id": bot_id,
            "metrics": metrics_data,
            "funnel": funnel_data,
            "revenue_by_days": revenue_data,
            "generated_at": datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        )

@router.get("/{bot_id}/metrics", response_model=Dict[str, Any])
async def get_bot_metrics(
    bot_id: str = Path(..., description="ID –±–æ—Ç–∞"),
    days: int = Query(7, ge=1, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –±–æ—Ç–∞
    
    Returns:
        Dict —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏: –≤—ã—Ä—É—á–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ–Ω–≤–µ—Ä—Å–∏—è, LTV
    """
    try:
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±–æ—Ç–∞ {bot_id}, –ø–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        metrics = await db_client.get_dashboard_metrics(bot_id, days)
        
        logger.info(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id} –ø–æ–ª—É—á–µ–Ω—ã")
        
        return {
            "success": True,
            "bot_id": bot_id,
            "period_days": days,
            "metrics": metrics
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"
        )

@router.get("/{bot_id}/funnel", response_model=Dict[str, Any])
async def get_funnel_analytics(
    bot_id: str = Path(..., description="ID –±–æ—Ç–∞"),
    days: int = Query(7, ge=1, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂
    
    Returns:
        Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º –∏ –æ–±—â–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π
    """
    try:
        logger.info(f"üéØ –ó–∞–ø—Ä–æ—Å –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}, –ø–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        funnel_stats = await db_client.get_funnel_stats(bot_id, days)
        
        logger.info(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id} –ø–æ–ª—É—á–µ–Ω–∞: {len(funnel_stats.get('steps', []))} —ç—Ç–∞–ø–æ–≤")
        
        return {
            "success": True,
            "bot_id": bot_id,
            "period_days": days,
            "funnel": funnel_stats
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"
        )

@router.get("/{bot_id}/revenue", response_model=Dict[str, Any])
async def get_revenue_analytics(
    bot_id: str = Path(..., description="ID –±–æ—Ç–∞"),
    days: int = Query(7, ge=1, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º
    
    Returns:
        Dict —Å –≤—ã—Ä—É—á–∫–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º
    """
    try:
        logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å –≤—ã—Ä—É—á–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}, –ø–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        revenue_data = await db_client.get_revenue_by_days(bot_id, days)
        
        logger.info(f"‚úÖ –í—ã—Ä—É—á–∫–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id} –ø–æ–ª—É—á–µ–Ω–∞: {len(revenue_data)} –¥–Ω–µ–π")
        
        return {
            "success": True,
            "bot_id": bot_id,
            "period_days": days,
            "revenue_data": revenue_data
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—ã—Ä—É—á–∫–∏"
        )

@router.get("/{bot_id}/detailed", response_model=Dict[str, Any])
async def get_detailed_analytics(
    bot_id: str = Path(..., description="ID –±–æ—Ç–∞"),
    days: int = Query(30, ge=1, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    Returns:
        Dict —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Å–µ—Å—Å–∏—è–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —ç—Ç–∞–ø–∞–º
    """
    try:
        logger.info(f"üìã –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}, –ø–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
        metrics = await db_client.get_dashboard_metrics(bot_id, days)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏...")
        funnel_stats = await db_client.get_funnel_stats(bot_id, days)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        detailed_analytics = {
            "bot_id": bot_id,
            "period_days": days,
            "total_sessions": metrics.get('total_sessions', 0),
            "total_users": metrics.get('total_users', 0),
            "stages": {step['stage']: step['users_count'] for step in funnel_stats.get('steps', [])},
            "events": [],  # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
            "avg_quality": 0.0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏–¥–æ–≤
            "generated_at": datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id} –ø–æ–ª—É—á–µ–Ω–∞")
        
        return detailed_analytics
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        )

@router.get("/{bot_id}/export", response_model=Dict[str, Any])
async def export_analytics(
    bot_id: str = Path(..., description="ID –±–æ—Ç–∞"),
    days: int = Query(30, ge=1, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"),
    export_format: str = Query("json", pattern="^(json|csv)$", description="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", alias="format")
) -> Dict[str, Any]:
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    
    Args:
        bot_id: ID –±–æ—Ç–∞
        days: –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
        export_format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json –∏–ª–∏ csv)
        
    Returns:
        Dict —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}, –ø–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π, —Ñ–æ—Ä–º–∞—Ç: {export_format}")
        
        db_client = get_supabase_client(bot_id)
        await db_client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
        metrics = await db_client.get_dashboard_metrics(bot_id, days)
        
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏...")
        funnel_stats = await db_client.get_funnel_stats(bot_id, days)
        
        logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏...")
        revenue_data = await db_client.get_revenue_by_days(bot_id, days)
        
        export_data = {
            "bot_id": bot_id,
            "period_days": days,
            "exported_at": datetime.now().isoformat(),
            "metrics": metrics,
            "funnel": funnel_stats,
            "revenue_data": revenue_data
        }
        
        if export_format == "json":
            logger.info(f"‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –±–æ—Ç–∞ {bot_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return export_data
        elif export_format == "csv":
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ CSV
            logger.warning(f"‚ö†Ô∏è CSV —ç–∫—Å–ø–æ—Ä—Ç –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON")
            return {
                "message": "CSV —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
                "data": export_data
            }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        )