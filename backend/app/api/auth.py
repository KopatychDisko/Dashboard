import logging
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Dict, Any

from app.services.telegram_auth import TelegramAuth
from app.database.supabase_client import get_supabase_client
from app.models.user import TelegramUser

logger = logging.getLogger(__name__)

router = APIRouter()

class TelegramAuthRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram"""
    telegram_id: int
    first_name: str
    last_name: str = None
    username: str = None
    photo_url: str = None
    auth_date: int
    hash: str

class AuthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    success: bool
    telegram_id: int
    first_name: str
    last_name: str = None
    username: str = None
    bots: list = []
    message: str

@router.post("/telegram", response_model=AuthResponse)
async def telegram_auth(auth_request: TelegramAuthRequest):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Widget
    """
    try:
        logger.info("=" * 100)
        logger.info(f"üîê –ù–û–í–ê–Ø –ü–û–ü–´–¢–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
        logger.info("=" * 100)
        logger.info(f"üë§ User ID: {auth_request.telegram_id}")
        logger.info(f"üë§ –ò–º—è: {auth_request.first_name} {auth_request.last_name or ''}")
        logger.info(f"üë§ Username: @{auth_request.username or '–Ω–µ—Ç'}")
        logger.info(f"üîë Hash (–ø–µ—Ä–≤—ã–µ 30): {auth_request.hash[:30]}...")
        logger.info(f"üîë Hash (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10): ...{auth_request.hash[-10:]}")
        logger.info(f"‚è∞ Auth date (timestamp): {auth_request.auth_date}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π –æ—Ç Telegram
        # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'id' –≤–º–µ—Å—Ç–æ 'telegram_id' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        auth_data = {
            'id': auth_request.telegram_id,
            'first_name': auth_request.first_name,
            'auth_date': auth_request.auth_date,
            'hash': auth_request.hash
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if auth_request.last_name:
            auth_data['last_name'] = auth_request.last_name
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: last_name = {auth_request.last_name}")
        if auth_request.username:
            auth_data['username'] = auth_request.username
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: username = {auth_request.username}")
        if auth_request.photo_url:
            auth_data['photo_url'] = auth_request.photo_url
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: photo_url = {auth_request.photo_url[:50]}...")
            
        logger.info(f"üì¶ –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {list(auth_data.keys())}")
        logger.info(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(auth_data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
        telegram_auth_service = TelegramAuth()
        
        logger.info("üîç –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ò...")
        logger.info("-" * 100)
        is_valid = telegram_auth_service.verify_telegram_auth(auth_data)
        logger.info("-" * 100)
        
        if not is_valid:
            logger.error("‚ùå" * 40)
            logger.error(f"‚ùå –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–¢–ö–õ–û–ù–ï–ù–ê: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {auth_request.telegram_id}")
            logger.error("‚ùå" * 40)
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
        
        logger.info("‚úÖ" * 40)
        logger.info(f"‚úÖ –ü–û–î–ü–ò–°–¨ –í–ê–õ–ò–î–ù–ê! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {auth_request.telegram_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        logger.info("‚úÖ" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 60 –º–∏–Ω—É—Ç)
        logger.info(f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        if not telegram_auth_service.check_auth_date(auth_request.auth_date, max_age_minutes=60):
            logger.error(f"‚è∞ –û–®–ò–ë–ö–ê: –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {auth_request.telegram_id}")
            raise HTTPException(
                status_code=400,
                detail="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ."
            )
        logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω–æ (–Ω–µ —Å—Ç–∞—Ä—à–µ 60 –º–∏–Ω—É—Ç)")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üì§ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_data = telegram_auth_service.extract_user_data(auth_data)
        logger.info(f"üì§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
        
        # –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üíæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db_client = get_supabase_client()
        await db_client.initialize()
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...")
        user_created = await db_client.create_or_update_user(user_data)
        
        if not user_created:
            logger.error(f"üíæ –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {auth_request.telegram_id}")
            raise HTTPException(
                status_code=500,
                detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        logger.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_bots = await db_client.get_user_bots(auth_request.telegram_id)
        logger.info(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤: {len(user_bots)}")
        
        logger.info("=" * 100)
        logger.info(f"üéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {auth_request.first_name} (@{auth_request.username or '–Ω–µ—Ç'})")
        logger.info(f"üéâ ID: {auth_request.telegram_id}")
        logger.info(f"üéâ –ë–æ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(user_bots)}")
        logger.info("=" * 100)
        
        return AuthResponse(
            success=True,
            telegram_id=auth_request.telegram_id,
            first_name=auth_request.first_name,
            last_name=auth_request.last_name,
            username=auth_request.username,
            bots=user_bots,
            message="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {auth_request.telegram_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )

@router.get("/user/{telegram_id}")
async def get_user_info(telegram_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {telegram_id}")
        
        db_client = get_supabase_client()
        await db_client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await db_client.get_user_info(telegram_id)
        
        if not user_info:
            raise HTTPException(
                status_code=404,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bots = await db_client.get_user_bots(telegram_id)
        
        return {
            "success": True,
            "user": user_info,
            "bots": user_bots
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {telegram_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )

@router.post("/verify-hash")
async def verify_telegram_hash(data: Dict[str, Any]):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    try:
        telegram_auth_service = TelegramAuth()
        is_valid = telegram_auth_service.verify_telegram_auth(data)
        
        return {
            "valid": is_valid,
            "message": "–ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞" if is_valid else "–ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏"
        )